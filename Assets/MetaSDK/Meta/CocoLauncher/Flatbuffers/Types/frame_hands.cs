// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace meta.types
{

using global::System;
using global::FlatBuffers;

public struct FrameHands : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FrameHands GetRootAsFrameHands(ByteBuffer _bb) { return GetRootAsFrameHands(_bb, new FrameHands()); }
  public static FrameHands GetRootAsFrameHands(ByteBuffer _bb, FrameHands obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FrameHands __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public meta.types.BufferHeader? Header { get { int o = __p.__offset(4); return o != 0 ? (meta.types.BufferHeader?)(new meta.types.BufferHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int HandCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public meta.types.HandData? Hands(int j) { int o = __p.__offset(8); return o != 0 ? (meta.types.HandData?)(new meta.types.HandData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int HandsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FrameHands> CreateFrameHands(FlatBufferBuilder builder,
      Offset<meta.types.BufferHeader> headerOffset = default(Offset<meta.types.BufferHeader>),
      int hand_count = 0,
      VectorOffset handsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    FrameHands.AddHands(builder, handsOffset);
    FrameHands.AddHandCount(builder, hand_count);
    FrameHands.AddHeader(builder, headerOffset);
    return FrameHands.EndFrameHands(builder);
  }

  public static void StartFrameHands(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddHeader(FlatBufferBuilder builder, Offset<meta.types.BufferHeader> headerOffset) { builder.AddOffset(0, headerOffset.Value, 0); }
  public static void AddHandCount(FlatBufferBuilder builder, int handCount) { builder.AddInt(1, handCount, 0); }
  public static void AddHands(FlatBufferBuilder builder, VectorOffset handsOffset) { builder.AddOffset(2, handsOffset.Value, 0); }
  public static VectorOffset CreateHandsVector(FlatBufferBuilder builder, Offset<meta.types.HandData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartHandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FrameHands> EndFrameHands(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FrameHands>(o);
  }
  public static void FinishFrameHandsBuffer(FlatBufferBuilder builder, Offset<FrameHands> offset) { builder.Finish(offset.Value); }
};


}
