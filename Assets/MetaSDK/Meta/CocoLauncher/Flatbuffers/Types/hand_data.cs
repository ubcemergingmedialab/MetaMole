// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace meta.types
{

using global::System;
using global::FlatBuffers;

public enum HandType : int
{
 RIGHT = 0,
 LEFT = 1,
};

public struct Vec3T : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vec3T __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Vec3T> CreateVec3T(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Vec3T>(builder.Offset);
  }
};

public struct HandData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HandData GetRootAsHandData(ByteBuffer _bb) { return GetRootAsHandData(_bb, new HandData()); }
  public static HandData GetRootAsHandData(ByteBuffer _bb, HandData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HandData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int HandId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public HandType HandType { get { int o = __p.__offset(6); return o != 0 ? (HandType)__p.bb.GetInt(o + __p.bb_pos) : HandType.RIGHT; } }
  public Vec3T? Top { get { int o = __p.__offset(8); return o != 0 ? (Vec3T?)(new Vec3T()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3T? Palm { get { int o = __p.__offset(10); return o != 0 ? (Vec3T?)(new Vec3T()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3T? HandAnchor { get { int o = __p.__offset(12); return o != 0 ? (Vec3T?)(new Vec3T()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3T? GrabAnchor { get { int o = __p.__offset(14); return o != 0 ? (Vec3T?)(new Vec3T()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool IsGrabbing { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void StartHandData(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddHandId(FlatBufferBuilder builder, int handId) { builder.AddInt(0, handId, 0); }
  public static void AddHandType(FlatBufferBuilder builder, HandType handType) { builder.AddInt(1, (int)handType, 0); }
  public static void AddTop(FlatBufferBuilder builder, Offset<Vec3T> topOffset) { builder.AddStruct(2, topOffset.Value, 0); }
  public static void AddPalm(FlatBufferBuilder builder, Offset<Vec3T> palmOffset) { builder.AddStruct(3, palmOffset.Value, 0); }
  public static void AddHandAnchor(FlatBufferBuilder builder, Offset<Vec3T> handAnchorOffset) { builder.AddStruct(4, handAnchorOffset.Value, 0); }
  public static void AddGrabAnchor(FlatBufferBuilder builder, Offset<Vec3T> grabAnchorOffset) { builder.AddStruct(5, grabAnchorOffset.Value, 0); }
  public static void AddIsGrabbing(FlatBufferBuilder builder, bool isGrabbing) { builder.AddBool(6, isGrabbing, false); }
  public static Offset<HandData> EndHandData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HandData>(o);
  }
  public static void FinishHandDataBuffer(FlatBufferBuilder builder, Offset<HandData> offset) { builder.Finish(offset.Value); }
};


}
