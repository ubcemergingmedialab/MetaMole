// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace meta.types
{

using global::System;
using global::FlatBuffers;

public struct BufferHeader : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BufferHeader GetRootAsBufferHeader(ByteBuffer _bb) { return GetRootAsBufferHeader(_bb, new BufferHeader()); }
  public static BufferHeader GetRootAsBufferHeader(ByteBuffer _bb, BufferHeader obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BufferHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Timestamp { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public ulong FrameId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<BufferHeader> CreateBufferHeader(FlatBufferBuilder builder,
      double timestamp = 0.0,
      ulong frame_id = 0) {
    builder.StartObject(2);
    BufferHeader.AddFrameId(builder, frame_id);
    BufferHeader.AddTimestamp(builder, timestamp);
    return BufferHeader.EndBufferHeader(builder);
  }

  public static void StartBufferHeader(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTimestamp(FlatBufferBuilder builder, double timestamp) { builder.AddDouble(0, timestamp, 0.0); }
  public static void AddFrameId(FlatBufferBuilder builder, ulong frameId) { builder.AddUlong(1, frameId, 0); }
  public static Offset<BufferHeader> EndBufferHeader(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BufferHeader>(o);
  }
  public static void FinishBufferHeaderBuffer(FlatBufferBuilder builder, Offset<BufferHeader> offset) { builder.Finish(offset.Value); }
};


}
