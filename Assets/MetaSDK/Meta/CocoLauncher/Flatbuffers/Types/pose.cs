// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace meta.types
{

using global::System;
using global::FlatBuffers;

public struct Position : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Position __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }

  public static Offset<Position> CreatePosition(FlatBufferBuilder builder, double X, double Y, double Z) {
    builder.Prep(8, 24);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<Position>(builder.Offset);
  }
};

public struct Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }
  public double W { get { return __p.bb.GetDouble(__p.bb_pos + 24); } }

  public static Offset<Quaternion> CreateQuaternion(FlatBufferBuilder builder, double X, double Y, double Z, double W) {
    builder.Prep(8, 32);
    builder.PutDouble(W);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<Quaternion>(builder.Offset);
  }
};

public struct PoseType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PoseType GetRootAsPoseType(ByteBuffer _bb) { return GetRootAsPoseType(_bb, new PoseType()); }
  public static PoseType GetRootAsPoseType(ByteBuffer _bb, PoseType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PoseType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public meta.types.BufferHeader? Header { get { int o = __p.__offset(4); return o != 0 ? (meta.types.BufferHeader?)(new meta.types.BufferHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Source { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(6); }
  public string Target { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTargetBytes() { return __p.__vector_as_arraysegment(8); }
  public Position? Position { get { int o = __p.__offset(10); return o != 0 ? (Position?)(new Position()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Quaternion? Orientation { get { int o = __p.__offset(12); return o != 0 ? (Quaternion?)(new Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPoseType(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddHeader(FlatBufferBuilder builder, Offset<meta.types.BufferHeader> headerOffset) { builder.AddOffset(0, headerOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(1, sourceOffset.Value, 0); }
  public static void AddTarget(FlatBufferBuilder builder, StringOffset targetOffset) { builder.AddOffset(2, targetOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Position> positionOffset) { builder.AddStruct(3, positionOffset.Value, 0); }
  public static void AddOrientation(FlatBufferBuilder builder, Offset<Quaternion> orientationOffset) { builder.AddStruct(4, orientationOffset.Value, 0); }
  public static Offset<PoseType> EndPoseType(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PoseType>(o);
  }
  public static void FinishPoseTypeBuffer(FlatBufferBuilder builder, Offset<PoseType> offset) { builder.Finish(offset.Value); }
};


}
